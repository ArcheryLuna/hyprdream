#!/bin/bash

# Hyprland Display Auto-Configuration Script
# This script automatically detects connected monitors and configures them
# with their highest resolution and refresh rate

DISPLAYS_CONF="$HOME/.config/hypr/defaults/displays.conf"
TEMP_CONF="/tmp/hypr_displays.conf"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to get monitor information
get_monitor_info() {
    if command -v hyprctl &> /dev/null; then
        # Use hyprctl if available (when Hyprland is running)
        hyprctl monitors all 2>/dev/null
    elif command -v wlr-randr &> /dev/null; then
        # Use wlr-randr as fallback
        wlr-randr 2>/dev/null
    elif command -v xrandr &> /dev/null; then
        # Use xrandr as last resort (for X11 systems)
        xrandr 2>/dev/null
    else
        print_error "No display detection tool available (hyprctl, wlr-randr, or xrandr)"
        return 1
    fi
}

# Function to parse monitor information and find best resolution/refresh rate
parse_monitors() {
    local monitor_info="$1"
    local monitors=()
    local x_offset=0
    
    # Create temporary config header
    cat > "$TEMP_CONF" << 'EOF'
# Auto-generated display configuration
# Generated by setup-displays.sh
# To see available monitors use: hyprctl monitors all

EOF

    if command -v hyprctl &> /dev/null && hyprctl monitors &>/dev/null; then
        # Parse hyprctl output
        print_status "Parsing Hyprland monitor information..."
        
        # Get monitor names and their modes
        local monitor_names=($(echo "$monitor_info" | grep "Monitor " | awk '{print $2}'))
        
        for monitor in "${monitor_names[@]}"; do
            print_status "Configuring monitor: $monitor"
            
            # Get the best resolution and refresh rate for this monitor
            local best_mode=$(echo "$monitor_info" | \
                grep -A 20 "Monitor $monitor" | \
                grep -E "^[[:space:]]*[0-9]+x[0-9]+@[0-9]+\.[0-9]+" | \
                sort -t'@' -k2 -nr | \
                head -1 | \
                awk '{print $1}')
            
            if [[ -n "$best_mode" ]]; then
                echo "monitor = $monitor, $best_mode, ${x_offset}x0, 1" >> "$TEMP_CONF"
                print_success "Added $monitor with mode $best_mode at offset ${x_offset}x0"
                
                # Calculate next x offset (assuming horizontal layout)
                local width=$(echo "$best_mode" | cut -d'x' -f1)
                x_offset=$((x_offset + width))
            else
                echo "monitor = $monitor, preferred, ${x_offset}x0, 1" >> "$TEMP_CONF"
                print_warning "Using preferred mode for $monitor"
                x_offset=$((x_offset + 1920)) # Assume 1920 width as fallback
            fi
        done
        
    else
        # Fallback: use preferred mode for all monitors
        print_warning "Hyprland not running, using fallback configuration"
        echo "# Fallback configuration - using preferred modes" >> "$TEMP_CONF"
        echo "monitor = , preferred, auto, 1" >> "$TEMP_CONF"
    fi
    
    # Add footer
    cat >> "$TEMP_CONF" << 'EOF'

# Additional monitor settings
# Uncomment and modify as needed:
# monitor = HDMI-A-1, disable
# workspace = 1, monitor:DP-1
# workspace = 2, monitor:HDMI-A-1
EOF
}

# Function to backup existing config
backup_config() {
    if [[ -f "$DISPLAYS_CONF" ]]; then
        local backup_file="${DISPLAYS_CONF}.backup.$(date +%Y%m%d_%H%M%S)"
        cp "$DISPLAYS_CONF" "$backup_file"
        print_status "Backed up existing config to: $backup_file"
    fi
}

# Main execution
main() {
    print_status "Starting automatic display configuration..."
    
    # Check if we're in the right directory
    if [[ ! -d "$HOME/.config/hypr/defaults" ]]; then
        print_error "Hyprland config directory not found"
        exit 1
    fi
    
    # Get monitor information
    print_status "Detecting connected monitors..."
    local monitor_info
    monitor_info=$(get_monitor_info)
    
    if [[ $? -ne 0 ]] || [[ -z "$monitor_info" ]]; then
        print_error "Failed to detect monitors"
        exit 1
    fi
    
    # Parse and configure monitors
    parse_monitors "$monitor_info"
    
    # Backup existing config
    backup_config
    
    # Apply new configuration
    cp "$TEMP_CONF" "$DISPLAYS_CONF"
    print_success "Display configuration updated!"
    
    # Show the new configuration
    echo
    print_status "New display configuration:"
    cat "$DISPLAYS_CONF"
    
    # Clean up
    rm -f "$TEMP_CONF"
    
    echo
    print_status "Configuration applied! Restart Hyprland or run 'hyprctl reload' to apply changes."
    
    # Offer to reload Hyprland if it's running
    if command -v hyprctl &> /dev/null && hyprctl monitors &>/dev/null; then
        echo
        read -p "Do you want to reload Hyprland configuration now? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            hyprctl reload
            print_success "Hyprland configuration reloaded!"
        fi
    fi
}

# Run main function
main "$@"
