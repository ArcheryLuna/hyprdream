#!/bin/bash

# Matugen color generation script for Hyprland
# This script generates colors from wallpapers and applies them to Hyprland

MATUGEN_CONFIG="$HOME/.config/matugen/config.toml"
COLORS_FILE="$HOME/.cache/matugen/colors-hyprland.conf"
WALLPAPER_FILE="$HOME/.cache/matugen/current-wallpaper"

# Create cache directory if it doesn't exist
mkdir -p "$HOME/.cache/matugen"

# Function to generate colors from wallpaper
generate_colors() {
    local wallpaper="$1"
    
    if [[ ! -f "$wallpaper" ]]; then
        echo "Wallpaper not found: $wallpaper"
        return 1
    fi
    
    echo "Generating colors from: $wallpaper"
    
    # Generate colors using matugen
    if command -v matugen &> /dev/null; then
        matugen image "$wallpaper" --json hex > /tmp/matugen_colors.json
        
        # Extract colors and create Hyprland config
        cat > "$COLORS_FILE" << EOF
# Generated by matugen
# Source: $wallpaper

# Primary colors
\$color0 = $(jq -r '.colors.dark.background' /tmp/matugen_colors.json 2>/dev/null || echo "#1a1b26")
\$color1 = $(jq -r '.colors.dark.primary' /tmp/matugen_colors.json 2>/dev/null || echo "#7aa2f7")
\$color2 = $(jq -r '.colors.dark.secondary' /tmp/matugen_colors.json 2>/dev/null || echo "#9aa5ce")
\$color3 = $(jq -r '.colors.dark.tertiary' /tmp/matugen_colors.json 2>/dev/null || echo "#7dcfff")
\$color4 = $(jq -r '.colors.dark.primary_container' /tmp/matugen_colors.json 2>/dev/null || echo "#bb9af7")
\$color5 = $(jq -r '.colors.dark.surface' /tmp/matugen_colors.json 2>/dev/null || echo "#c0caf5")

# Additional colors
\$color6 = $(jq -r '.colors.dark.secondary_container' /tmp/matugen_colors.json 2>/dev/null || echo "#9ece6a")
\$color7 = $(jq -r '.colors.dark.tertiary_container' /tmp/matugen_colors.json 2>/dev/null || echo "#e0af68")
\$color8 = $(jq -r '.colors.dark.error' /tmp/matugen_colors.json 2>/dev/null || echo "#f7768e")
\$color9 = $(jq -r '.colors.dark.primary_fixed' /tmp/matugen_colors.json 2>/dev/null || echo "#7aa2f7")

# Text colors
\$color10 = $(jq -r '.colors.dark.on_background' /tmp/matugen_colors.json 2>/dev/null || echo "#c0caf5")
\$color11 = $(jq -r '.colors.dark.on_primary' /tmp/matugen_colors.json 2>/dev/null || echo "#1a1b26")
\$color12 = $(jq -r '.colors.dark.on_secondary' /tmp/matugen_colors.json 2>/dev/null || echo "#1a1b26")
\$color13 = $(jq -r '.colors.dark.on_tertiary' /tmp/matugen_colors.json 2>/dev/null || echo "#1a1b26")
\$color14 = $(jq -r '.colors.dark.on_surface' /tmp/matugen_colors.json 2>/dev/null || echo "#1a1b26")
\$color15 = $(jq -r '.colors.dark.on_surface_variant' /tmp/matugen_colors.json 2>/dev/null || echo "#1a1b26")
EOF
        
        # Save current wallpaper path
        echo "$wallpaper" > "$WALLPAPER_FILE"
        
        # Clean up
        rm -f /tmp/matugen_colors.json
        
        echo "Colors generated successfully"
        return 0
    else
        echo "Matugen not found, using default colors"
        return 1
    fi
}

# Function to apply colors to Hyprland
apply_colors() {
    if [[ -f "$COLORS_FILE" ]]; then
        # Apply colors to configuration files
        if [[ -f "$HOME/.config/hypr/scripts/apply-colors.sh" ]]; then
            "$HOME/.config/hypr/scripts/apply-colors.sh"
        fi
        
        # Reload Hyprland configuration
        if command -v hyprctl &> /dev/null; then
            hyprctl reload
        fi
        echo "Colors applied to Hyprland"
    fi
}

# Function to get current wallpaper
get_current_wallpaper() {
    if [[ -f "$WALLPAPER_FILE" ]]; then
        cat "$WALLPAPER_FILE"
    else
        # Try to get wallpaper from SWWW
        if command -v swww &> /dev/null; then
            # Get the current wallpaper from SWWW
            swww query | grep -o 'image: [^[:space:]]*' | cut -d' ' -f2 | head -1
        else
            echo ""
        fi
    fi
}

# Main execution
case "${1:-}" in
    "generate")
        if [[ -n "$2" ]]; then
            generate_colors "$2"
            apply_colors
        else
            echo "Usage: $0 generate <wallpaper_path>"
            exit 1
        fi
        ;;
    "apply")
        apply_colors
        ;;
    "current")
        get_current_wallpaper
        ;;
    "reload")
        # Regenerate colors from current wallpaper
        current_wallpaper=$(get_current_wallpaper)
        if [[ -n "$current_wallpaper" && -f "$current_wallpaper" ]]; then
            generate_colors "$current_wallpaper"
            apply_colors
        else
            echo "No current wallpaper found"
            exit 1
        fi
        ;;
    *)
        echo "Usage: $0 {generate|apply|current|reload}"
        echo "  generate <wallpaper> - Generate colors from wallpaper"
        echo "  apply               - Apply current colors to Hyprland"
        echo "  current             - Show current wallpaper"
        echo "  reload              - Regenerate colors from current wallpaper"
        exit 1
        ;;
esac
